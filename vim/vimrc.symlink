set nocompatible

"*****************************************************************************
" Plugins
"*****************************************************************************

" Install vim-plug if missing
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall
endif

call plug#begin('~/.vim/bundle')

" Git stuff
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'

" UI (Colorschemes and tagbars)
Plug 'arcticicestudio/nord-vim'
Plug 'bling/vim-airline'
Plug 'majutsushi/tagbar'
Plug 'kshenoy/vim-signature'
Plug 'scrooloose/nerdtree'

" Code Prettifiers/Helpers
Plug 'bronson/vim-trailing-whitespace'
Plug 'w0rp/ale'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'Valloric/YouCompleteMe'
Plug 'tpope/vim-surround'
Plug 'chrisbra/Colorizer'
Plug 'jiangmiao/auto-pairs'
Plug 'editorconfig/editorconfig-vim'
Plug 'sheerun/vim-polyglot'

" Frontend Dev
Plug 'othree/jspc.vim', { 'for': 'javascript' }
Plug 'ramitos/jsctags'
Plug 'mattn/emmet-vim'

" Snippets
" Plug 'sirver/ultisnips'
" Plug 'epilande/vim-react-snippets'
" Plug 'epilande/vim-es2015-snippets'

" Searching
Plug 'mileszs/ack.vim'

call plug#end()

"*****************************************************************************
" Basic Setup
"*****************************************************************************"

" Detect filetype
filetype on

" Encoding
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8
set binary
set ttyfast

" Tabspace settings
set tabstop=4
set shiftwidth=4
set softtabstop=0
set expandtab

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" Set some vim vars
set updatetime=1000
set laststatus=2
set splitbelow
set splitright
set nowrap

" Line numbers
set number
set norelativenumber

" Performance increase
syntax sync minlines=200
set nocursorcolumn
set nocursorline

" Autosave
autocmd CursorHold,CursorHoldI,InsertLeave * silent! wall

" vim-javascript
augroup vimrc-javascript
    autocmd!
    autocmd FileType javascript set tabstop=2|set shiftwidth=2|set expandtab softtabstop=2 smartindent
augroup END

"*****************************************************************************
" UI Tweaks
"*****************************************************************************

" Enable syntax highlighting
syntax enable

" Enable lovely retro colour
set background=dark
colorscheme nord

" Enable 256 colors in terminal
set t_Co=256

" Set comments to autoitalic
let &t_ZH="\e[3m"
let &t_ZR="\e[23m"
highlight Comment cterm=italic

"*****************************************************************************
" Mappings
"*****************************************************************************

" Map Leader to space
let mapleader = "\<Space>"
let g:mapleader = "\<Space>"

" Fast editing of vimrc
map <leader>e :e! ~/.vimrc<cr>

" Tabs (well buffers)
nnoremap <Tab> :bnext<CR>
nnoremap <S-Tab> :bprevious<CR>

" Git
noremap <Leader>gs :Gstatus<CR>
noremap <Leader>ga :Gwrite<CR>
noremap <Leader>gc :Gcommit<CR>
noremap <Leader>gsh :Gpush<CR>
noremap <Leader>gb :Gblame<CR>
noremap <Leader>gr :Gremove<CR>
noremap <Leader>gll :Gpull<CR>
noremap <Leader>gd :Gvdiff<CR>
noremap <Leader>gbr :Gbrowse<CR>

" Close buffer
noremap <Leader>c :bd<CR>

" Quickly insert an empty new line without entering insert mode
nnoremap <Leader>o o<Esc>
nnoremap <Leader>O O<Esc>

" Shifttab out of brackets and quotes
inoremap <S-Tab> <C-o>A

"*****************************************************************************
" Abbreviations
"*****************************************************************************

" Catches fat-fingered/thoughtless exits
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev Qall! qall!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev Qall qall
cnoremap sudow w !sudo tee % >/dev/null

"*****************************************************************************
" Plugin config
"*****************************************************************************
" YCM settings
let g:ycm_confirm_extra_conf = 1
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_rust_src_path = '~/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/src'
let g:ycm_python_binary_path = '/usr/local/bin/python3'
let g:ycm_filetype_blacklist = { 'html' : 1 }
let g:ycm_semantic_triggers = { 'css': [ 're!^\s{4}', 're!:\s+' ],
                             \ 'scss': [ 're!^\s{4}', 're!:\s+' ] }

" Javascript shorthand
set cole=1
let g:javascript_conceal_function       = "ƒ"
let g:javascript_conceal_null           = "ø"
let g:javascript_conceal_this           = "@"

" Ack settings
noremap <Leader>a :Ack! <cword><cr>

" ALE Linter
let g:airline#extensions#ale#enabled = 1
let g:ale_sign_warning = '▲'
let g:ale_sign_error = '✗'

" FZF
set rtp+=/usr/local/opt/fzf
nnoremap <c-p> :FZF<CR>
let g:fzf_layout = { 'down': '~20%' }
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" Airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1

" Colorizer
let g:colorizer_auto_filetype='css,html'
let g:colorizer_skip_comments = 1

" Tagbar
nnoremap ™ :TagbarToggle<CR>
let g:tagbar_autofocus = 1
let g:tagbar_autoclose = 1

" NerdTree
map ¡ :NERDTreeToggle<CR>
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'

" Git gutter
nnoremap <F2> :GitGutterSignsToggle<CR>
let g:gitgutter_sign_added = '●'
let g:gitgutter_sign_modified = '●'
let g:gitgutter_sign_removed = '●'
let g:gitgutter_sign_modified_removed = '●'
highlight clear SignColumn

" Utilsnips
" let g:UltiSnipsExpandTrigger = '<C-l>'
" let g:UltiSnipsJumpForwardTrigger = '<c-l>'
" let g:UltiSnipsJumpBackwardTrigger = '<c-z>'

" JSX in JS files
let g:jsx_ext_required = 0
let g:user_emmet_settings = { 'javascript.jsx' : { 'extends' : 'jsx' } }
autocmd FileType javascript setlocal omnifunc=tern#Complete
